name: Build, Test, and Publish

on:
  push:
    branches: [ master, dev ]

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set_vars.outputs.version_number }}
    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    - name: Set variables
      id: set_vars
      run: |
        BASE_VER=$(cat VERSION)
        MAJOR_MINOR=$(echo "$BASE_VER" | cut -d. -f1,2)
        VERSION_NUMBER="${MAJOR_MINOR}.${{ github.run_number }}"
        echo "VERSION=${VERSION_NUMBER}" >> $GITHUB_ENV
        echo "version_number=${VERSION_NUMBER}" >> $GITHUB_OUTPUT
    - name: Update version in files
      run: |
        sed -i 's/version = .*;/version = \"${{ env.VERSION }}\";/' ./SudokuSolver/Version.cs
        find . -type f -name '*.user.js' | xargs sed -i -E 's/(@version[ \t]*).*/\1${{ env.VERSION }}/'
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --nologo --configuration Release --no-restore
    - name: Test
      run: dotnet test --nologo --configuration Release --no-build --verbosity normal
    - name: Upload Workspace with Updated Versions
      uses: actions/upload-artifact@v4
      with:
        name: workspace
        path: . # Upload the whole workspace, including versioned files

  package:
    runs-on: ubuntu-latest
    needs: build_and_test
    strategy:
      matrix:
        include:
          - rid: win-x64
            os_folder: Windows
            archive_ext: zip # For Windows
            archive_filename_suffix: win-x64
          - rid: win-arm64
            os_folder: Windows
            archive_ext: zip # For Windows
            archive_filename_suffix: win-arm64
          - rid: linux-x64
            os_folder: Linux
            archive_ext: tar.gz # For Linux
            archive_filename_suffix: linux-x64
          - rid: osx-x64
            os_folder: OSX
            archive_ext: tar.gz # For macOS
            archive_filename_suffix: osx-x64
          - rid: osx-arm64
            os_folder: OSX
            archive_ext: tar.gz # For macOS
            archive_filename_suffix: osx-arm64
    steps:
    - name: Download Workspace
      uses: actions/download-artifact@v4
      with:
        name: workspace
        path: .
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    - name: Set VERSION env var from job output
      run: echo "VERSION=${{ needs.build_and_test.outputs.version }}" >> $GITHUB_ENV
    - name: Debug env.VERSION
      run: |
        echo "DEBUG: env.VERSION is '${{ env.VERSION }}'"
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
    - name: Restore dependencies for publish
      run: dotnet restore
    - name: Publish ${{ matrix.rid }}
      run: dotnet publish ./SudokuSolverConsole/SudokuSolverConsole.csproj --nologo -c Release -r ${{ matrix.rid }} -p:PublishSingleFile=true --self-contained true --no-restore -o publish-${{ matrix.rid }}
    - name: Delete pdbs for ${{ matrix.rid }}
      run: rm -f ./publish-${{ matrix.rid }}/*.pdb
    - name: Archive ${{ matrix.rid }} # Renamed and modified
      run: |
        ARCHIVE_NAME="SudokuSolver-${{ env.VERSION }}-${{ matrix.archive_filename_suffix }}.${{ matrix.archive_ext }}"
        PACKAGE_DIR="package-${{ matrix.rid }}"
        mkdir -p "$PACKAGE_DIR"
        
        cp -r ./publish-${{ matrix.rid }}/* "$PACKAGE_DIR/"
        
        if [ -d "./UserScripts" ] && [ -n "$(ls -A ./UserScripts 2>/dev/null)" ]; then
          cp -r ./UserScripts/* "$PACKAGE_DIR/"
        fi
        
        if [ -d "./${{ matrix.os_folder }}" ] && [ -n "$(ls -A ./${{ matrix.os_folder }} 2>/dev/null)" ]; then
          cp -r ./${{ matrix.os_folder }}/* "$PACKAGE_DIR/"
        fi
        
        echo "Creating archive: $ARCHIVE_NAME"
        if [ "${{ matrix.archive_ext }}" = "zip" ]; then
          (cd "$PACKAGE_DIR" && zip -q -r "../$ARCHIVE_NAME" .)
        else # For tar.gz
          (cd "$PACKAGE_DIR" && tar -cpzf "../$ARCHIVE_NAME" .) # -p preserves permissions
        fi
        echo "ARCHIVE_PATH=$ARCHIVE_NAME" >> $GITHUB_ENV
        echo "Archive created at $ARCHIVE_NAME"
    - name: Upload Artifact for ${{ matrix.rid }}
      id: upload_artifact_step
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARCHIVE_PATH }} # Use the exact archive filename
        path: ${{ env.ARCHIVE_PATH }} # Path to the specific archive file
        if-no-files-found: error
    - name: Update Job Summary for ${{ matrix.rid }}
      if: always()
      shell: bash
      run: |
        RID_VAL="${{ matrix.rid }}"
        VERSION_VAL="${{ env.VERSION }}"
        STATUS_VAL="${{ job.status }}"
        UPLOAD_ARTIFACT_ID_VAL="${{ steps.upload_artifact_step.outputs.artifact-id }}"
        # Construct the artifact name as it appears in the UI
        # This will now be the actual filename, e.g., SudokuSolver-1.2.137-linux-x64.tar.gz
        ARTIFACT_DISPLAY_NAME="${{ env.ARCHIVE_PATH }}" # Use the actual archive path from the previous step

        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "### Package: \`$RID_VAL\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: \`$VERSION_VAL\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: \`$STATUS_VAL\`" >> $GITHUB_STEP_SUMMARY

        if [ "$STATUS_VAL" == "success" ] && [ -n "$UPLOAD_ARTIFACT_ID_VAL" ]; then
          ARTIFACT_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts/$UPLOAD_ARTIFACT_ID_VAL"
          echo "- **Artifact**: [$ARTIFACT_DISPLAY_NAME]($ARTIFACT_URL)" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Artifact Name**: \`$ARTIFACT_DISPLAY_NAME\` (Upload may have been skipped or failed if status is not success. Artifact ID: '$UPLOAD_ARTIFACT_ID_VAL')" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY